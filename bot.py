import os, re, sys
import pandas as pd
from datetime import datetime, timedelta, date
from typing import List, Dict
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

DAY_NAMES = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫","–í—ñ–≤—Ç–æ—Ä–æ–∫","–°–µ—Ä–µ–¥–∞","C–µ—Ä–µ–¥–∞","–ß–µ—Ç–≤–µ—Ä","–ü'—è—Ç–Ω–∏—Ü—è","–°—É–±–æ—Ç–∞","–ù–µ–¥—ñ–ª—è"]
DAY_PATTERN = r"^(?P<dow>" + "|".join(map(re.escape, DAY_NAMES)) + r")\s+(?P<date>\d{1,2}\.\d{1,2})\s*$"
day_re = re.compile(DAY_PATTERN)

SHIFT_PATTERN = r"""^(?P<name>[\w–ê-–Ø–∞-—è–Ü—ñ–á—ó–Ñ—î'‚Äô -]+?)\s+
                     (?P<start>\d{1,2}:\d{2})-(?P<end>\d{1,2}:\d{2})
                     (?:\s*\((?P<bstart>\d{1,2}:\d{2})-(?P<bend>\d{1,2}:\d{2})\))?$
                  """
shift_re = re.compile(SHIFT_PATTERN, re.X)

# --- –¢–∞–±–µ–ª—å helpers ---
def hhmm_to_dt(s: str) -> datetime:
    h, m = map(int, s.split(":"))
    return datetime(2000,1,1,h,m)

def compute_tabulated_hours(start, end, dow: str) -> float:
    sdt, edt = hhmm_to_dt(start), hhmm_to_dt(end)
    if dow in ["–°—É–±–æ—Ç–∞","–ù–µ–¥—ñ–ª—è"]:
        legal_start, legal_end = hhmm_to_dt("09:00"), hhmm_to_dt("19:00")
    else:
        legal_start, legal_end = hhmm_to_dt("08:00"), hhmm_to_dt("20:00")
    sdt = max(sdt, legal_start)
    edt = min(edt, legal_end)
    if edt <= sdt:
        return 0.0
    hours = (edt - sdt).total_seconds()/3600.0
    if hours >= 6:
        hours -= 1
    return round(hours,2)

# --- Parsing schedule text ---
def parse_blocks_for_text(raw_text: str, year: int) -> List[Dict]:
    lines = [ln.strip() for ln in raw_text.splitlines()]
    blocks, current = [], None
    for ln in lines:
        if not ln: continue
        m = day_re.match(ln)
        if m:
            dow = m.group("dow").replace("C–µ—Ä–µ–¥–∞","–°–µ—Ä–µ–¥–∞")
            ddmm = m.group("date")
            current = {"dow": dow, "date": ddmm, "entries": []}
            blocks.append(current); continue
        if current is None: continue
        m2 = shift_re.match(re.sub(r"\s{2,}", " ", ln))
        if m2:
            d = m2.groupdict()
            name = re.sub(r"\s{2,}", " ", d["name"]).strip()
            start, end = d["start"], d["end"]
            raw = (hhmm_to_dt(end)-hhmm_to_dt(start)).total_seconds()/3600.0
            tab = compute_tabulated_hours(start,end,current["dow"])
            current["entries"].append({
                "name": name,
                "start": start, "end": end,
                "bstart": d.get("bstart"), "bend": d.get("bend"),
                "raw_hours": round(raw,2),
                "tab_hours": tab
            })
    for b in blocks:
        dt = datetime.strptime(f"{b['date']}.{year}", "%d.%m.%Y").date()
        b["date_iso"] = dt.isoformat()
        b["total_hours"] = sum(e["tab_hours"] for e in b["entries"])
    return blocks

def anchor_monday(min_date: date, user_anchor: str|None) -> date:
    if user_anchor:
        try:
            d = datetime.strptime(user_anchor,"%Y-%m-%d").date()
            if d.weekday()!=0: d -= timedelta(days=d.weekday())
            return d
        except: pass
    return min_date - timedelta(days=min_date.weekday())

def assign_weeks(blocks: List[Dict], first_monday: date):
    for b in blocks:
        d = datetime.fromisoformat(b["date_iso"]).date()
        b["week"] = 1+((d-first_monday).days//7)

# --- Build DataFrames ---
def build_week_df(blocks: List[Dict], week_no:int) -> pd.DataFrame:
    rows=[]
    week_blocks=sorted([b for b in blocks if b["week"]==week_no], key=lambda x:x["date_iso"])
    for b in week_blocks:
        day_label=f"{b['dow']}  {datetime.fromisoformat(b['date_iso']).strftime('%d.%m')} ({int(round(b['total_hours']))}–≥–æ–¥.)"
        first=True
        for e in b["entries"]:
            brk=f"{e['bstart']}-{e['bend']}" if e.get("bstart") and e.get("bend") else ""
            rows.append({
                "–î–µ–Ω—å": day_label if first else "",
                "–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫": e["name"],
                "–†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏": f"{e['start']}-{e['end']}",
                "–ü–µ—Ä–µ—Ä–≤–∞": brk
            }); first=False
        rows.append({"–î–µ–Ω—å":"","–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫":"","–†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏":"","–ü–µ—Ä–µ—Ä–≤–∞":""})
    if not rows: rows=[{"–î–µ–Ω—å":"","–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫":"","–†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏":"","–ü–µ—Ä–µ—Ä–≤–∞":""}]
    return pd.DataFrame(rows)

def build_wide_weeks(blocks,weeks:int)->pd.DataFrame:
    week_tables={w:build_week_df(blocks,w) for w in range(1,weeks+1)}
    max_rows=max((df.shape[0] for df in week_tables.values()),default=0)
    padded=[]
    for w in range(1,weeks+1):
        df=week_tables[w]
        if df.shape[0]<max_rows:
            pad=pd.DataFrame([{ "–î–µ–Ω—å":"","–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫":"","–†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏":"","–ü–µ—Ä–µ—Ä–≤–∞":""}]*(max_rows-df.shape[0]))
            df=pd.concat([df,pad],ignore_index=True)
        df.columns=[f"{w}–π —Ç–∏–∂–¥–µ–Ω—å","–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫","–†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏","–ü–µ—Ä–µ—Ä–≤–∞"]
        padded.append(df)
    return pd.concat(padded,axis=1) if padded else pd.DataFrame()

def build_detail(blocks: List[Dict])->pd.DataFrame:
    rows=[]
    for b in blocks:
        for e in b["entries"]:
            rows.append({
                "–î–∞—Ç–∞": datetime.fromisoformat(b["date_iso"]),
                "–¢–∏–∂–¥–µ–Ω—å": b["week"],
                "–î–µ–Ω—å —Ç–∏–∂–Ω—è": b["dow"],
                "–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫": e["name"],
                "–ü–æ—á–∞—Ç–æ–∫": e["start"], "–ö—ñ–Ω–µ—Ü—å": e["end"],
                "–ü–µ—Ä–µ—Ä–≤–∞ –ø–æ—á–∞—Ç–æ–∫": e.get("bstart") or "",
                "–ü–µ—Ä–µ—Ä–≤–∞ –∫—ñ–Ω–µ—Ü—å": e.get("bend") or "",
                "–§—ñ–∫—Å–æ–≤–∞–Ω—ñ –≥–æ–¥–∏–Ω–∏": e["raw_hours"],
                "–¢–∞–±–µ–ª—å–Ω—ñ –≥–æ–¥–∏–Ω–∏": e["tab_hours"]
            })
    return pd.DataFrame(rows).sort_values(["–î–∞—Ç–∞","–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫"])

def build_summary(detail:pd.DataFrame,weeks:int)->pd.DataFrame:
    if detail.empty:
        return pd.DataFrame(columns=["–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫"]+[f"–¢–∏–∂–¥–µ–Ω—å {i}" for i in range(1,weeks+1)]+["–í—Å—å–æ–≥–æ (–≥–æ–¥)"])
    pv=detail.pivot_table(index="–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫",columns="–¢–∏–∂–¥–µ–Ω—å",values="–¢–∞–±–µ–ª—å–Ω—ñ –≥–æ–¥–∏–Ω–∏",aggfunc="sum",fill_value=0)
    pv=pv.reindex(columns=list(range(1,weeks+1)),fill_value=0)
    pv.columns=[f"–¢–∏–∂–¥–µ–Ω—å {c}" for c in pv.columns]
    pv["–í—Å—å–æ–≥–æ (–≥–æ–¥)"]=pv.sum(axis=1).round(2)
    return pv.reset_index()
# function to calculate working days summary
def build_working_days_summary(blocks: List[Dict]) -> pd.DataFrame:
    rows = []
    for b in blocks:
        for e in b["entries"]:
            rows.append({
                "–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫": e["name"],
                "–¢–∏–∂–¥–µ–Ω—å": b["week"],
                "–î–µ–Ω—å": b["dow"],
                "–î–∞—Ç–∞": datetime.fromisoformat(b["date_iso"]),
                "–ì–æ–¥–∏–Ω–∏": e["tab_hours"]
            })
    df = pd.DataFrame(rows)
    if df.empty:
        return pd.DataFrame(columns=["–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫", "–¢–∏–∂–¥–µ–Ω—å", "–î–µ–Ω—å", "–î–∞—Ç–∞", "–ì–æ–¥–∏–Ω–∏"])
    
    # Group by employee and week, and aggregate the data
    summary = (
        df.groupby(["–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫", "–¢–∏–∂–¥–µ–Ω—å"])
        .agg(
            –î–Ω—ñ=("–î–µ–Ω—å", lambda x: ", ".join(sorted(set(x), key=DAY_NAMES.index))),
            –ì–æ–¥–∏–Ω–∏=("–ì–æ–¥–∏–Ω–∏", "sum")
        )
        .reset_index()
    )
    return summary
def build_schedule_table(blocks: List[Dict]) -> pd.DataFrame:
    rows = []
    for b in blocks:
        for e in b["entries"]:
            rows.append({
                "–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫": e["name"],
                "–¢–∏–∂–¥–µ–Ω—å": b["week"],
                "–î–µ–Ω—å": b["dow"],
                "–î–∞—Ç–∞": datetime.fromisoformat(b["date_iso"]),
                "–ì–æ–¥–∏–Ω–∏": f"{e['start']}-{e['end']}"
            })
    df = pd.DataFrame(rows)
    if df.empty:
        return pd.DataFrame(columns=["–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫"] + DAY_NAMES)
    
    # Pivot the data to create a tabular view
    schedule_table = (
        df.pivot_table(
            index="–ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫",
            columns="–î–µ–Ω—å",
            values="–ì–æ–¥–∏–Ω–∏",
            aggfunc=lambda x: " | ".join(x)  # Combine multiple shifts for the same day
        )
        .reindex(columns=DAY_NAMES, fill_value="")  # Ensure correct day order
        .reset_index()
    )
    return schedule_table

def write_excel(out_path,wide,detail,summary,working_days_summary,schedule_table):
    with pd.ExcelWriter(out_path,engine="xlsxwriter") as writer:
        if not wide.empty: wide.to_excel(writer,sheet_name="week",index=False)
        if not detail.empty: detail.to_excel(writer,sheet_name="detail",index=False)
        if not summary.empty: summary.to_excel(writer,sheet_name="summary",index=False)
        if not working_days_summary.empty:working_days_summary.to_excel(writer, sheet_name="working days summary", index=False)
        if not schedule_table.empty:schedule_table.to_excel(writer, sheet_name="schedule table", index=False)
        for sheet in writer.sheets.values():
            sheet.set_column(0,0,26); sheet.set_column(1,100,18)




# --- Telegram bot state ---
user_settings = {}

# --- Handlers ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_settings[update.effective_chat.id] = {"year": datetime.now().year, "weeks": 4, "anchor": None}
    keyboard = [
        [InlineKeyboardButton("‚ÑπÔ∏è Help", callback_data="help")],
        [InlineKeyboardButton("‚öôÔ∏è Settings", callback_data="settings")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ä–æ–∑–∫–ª–∞–¥—ñ–≤. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ä–æ–∑–∫–ª–∞–¥ —è–∫ .txt —Ñ–∞–π–ª –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ.",
        reply_markup=reply_markup
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "‚ÑπÔ∏è <b>–î–æ–≤—ñ–¥–∫–∞</b>\n\n"
        "üìÖ <b>–ö–æ–º–∞–Ω–¥–∏:</b>\n"
        "‚Ä¢ /year YYYY ‚Äì –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ä—ñ–∫\n"
        "‚Ä¢ /weeks N ‚Äì –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∏–∂–Ω—ñ–≤ —É –≤–∏–≤–æ–¥—ñ\n"
        "‚Ä¢ /anchor YYYY-MM-DD ‚Äì –∑–∞–¥–∞—Ç–∏ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ —è–∫ –ø–µ—Ä—à–∏–π —Ç–∏–∂–¥–µ–Ω—å\n"
        "‚Ä¢ /reset ‚Äì —Å–∫–∏–Ω—É—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö\n\n"
        "üìÇ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ä–æ–∑–∫–ª–∞–¥ —è–∫ .txt —Ñ–∞–π–ª, —ñ —è —Å—Ç–≤–æ—Ä—é —Ç–∞–±–ª–∏—Ü—é üìä"
    )
    await update.message.reply_text(msg, parse_mode="HTML")

async def year_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):

    try:
        year = int(context.args[0])
        user_settings[update.effective_chat.id]["year"] = year
        await update.message.reply_text(f"‚úÖ –†—ñ–∫ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {year} üìÖ")
    except:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å —Ä—ñ–∫, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /year 2025")

async def weeks_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):

    try:
        w = int(context.args[0])
        user_settings[update.effective_chat.id]["weeks"] = w
        await update.message.reply_text(f"‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∏–∂–Ω—ñ–≤ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ {w} üìÜ")
    except:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /weeks 6")

async def anchor_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):

    try:
        d = datetime.strptime(context.args[0], "%Y-%m-%d").date()
        user_settings[update.effective_chat.id]["anchor"] = d
        await update.message.reply_text(f"‚úÖ –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {d} üìå")
    except:
        await update.message.reply_text("‚ùå –í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD")

async def reset_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_settings[update.effective_chat.id] = {"year": datetime.now().year, "weeks": 4, "anchor": None}
    await update.message.reply_text(
        "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∏–Ω—É—Ç–æ.\n"
        "–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ä–æ–∑–∫–ª–∞–¥ —è–∫ .txt —Ñ–∞–π–ª –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è /help –¥–ª—è –¥–æ–≤—ñ–¥–∫–∏."
    )

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text:
        await process_schedule_and_reply(update, context, text)

async def txt_document_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doc = update.message.document
    if doc.mime_type != "text/plain":
        await update.message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å .txt —Ñ–∞–π–ª üìÇ")
        return
    file = await doc.get_file()
    text = (await file.download_as_bytearray()).decode("utf-8")
    await process_schedule_and_reply(update, context, text)

# --- Callback Query Handler ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "help":
        await help_cmd(update, context)
    elif query.data == "settings":
        await query.edit_message_text(
            "‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:</b>\n"
            "‚Ä¢ /year YYYY ‚Äì –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ä—ñ–∫\n"
            "‚Ä¢ /weeks N ‚Äì –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∏–∂–Ω—ñ–≤ —É –≤–∏–≤–æ–¥—ñ\n"
            "‚Ä¢ /anchor YYYY-MM-DD ‚Äì –∑–∞–¥–∞—Ç–∏ –ø–æ–Ω–µ–¥—ñ–ª–æ–∫ —è–∫ –ø–µ—Ä—à–∏–π —Ç–∏–∂–¥–µ–Ω—å\n"
            "‚Ä¢ /reset ‚Äì —Å–∫–∏–Ω—É—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö",
            parse_mode="HTML"
        )

# --- Core ---
async def process_schedule_and_reply(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    settings = user_settings.get(update.effective_chat.id, {"year": datetime.now().year, "weeks": 4, "anchor": None})
    year = settings["year"]
    blocks=parse_blocks_for_text(text,year)
    if not blocks:
        await update.message.reply_text("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥")
        return
    min_date=min(datetime.fromisoformat(b["date_iso"]).date() for b in blocks)
    first_monday=anchor_monday(min_date, settings["anchor"].isoformat() if settings["anchor"] else None)
    assign_weeks(blocks,first_monday)
    weeks=settings["weeks"]
    wide=build_wide_weeks(blocks,weeks)
    detail=build_detail(blocks)
    summary=build_summary(detail,weeks)
    working_days_summary = build_working_days_summary(blocks)
    schedule_table = build_schedule_table(blocks)
    out_path="schedule.xlsx"
    write_excel(out_path,wide,detail,summary,working_days_summary,schedule_table)
    await update.message.reply_document(open(out_path,"rb"), filename="schedule.xlsx")

# --- Main ---
def main():
    # Add logging to debug BOT_TOKEN
    print("Starting bot...")
    token = os.environ.get("BOT_TOKEN")
    if not token:
        print("Error: BOT_TOKEN environment variable is not set.")
        sys.exit(1)
    else:
        print(f"BOT_TOKEN is set: {token[:4]}... (truncated for security)")


    app = Application.builder().token(token).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("year", year_cmd))
    app.add_handler(CommandHandler("weeks", weeks_cmd))
    app.add_handler(CommandHandler("anchor", anchor_cmd))
    app.add_handler(CommandHandler("reset", reset_cmd))
    app.add_handler(MessageHandler(filters.Document.MimeType("text/plain"), txt_document_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.add_handler(CallbackQueryHandler(button_handler))  # Added callback query handler
    app.run_polling()

if __name__=="__main__":
    main()

